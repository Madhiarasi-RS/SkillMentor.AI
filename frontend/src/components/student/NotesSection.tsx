
import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Badge } from '@/components/ui/badge';
import { Separator } from '@/components/ui/separator';
import { BookOpen, Download, Printer, Sparkles, AlertCircle, Loader2 } from 'lucide-react';
import { toast } from '@/hooks/use-toast';
import { generatePDF } from '../../utils/pdfGenerator';
import axios from 'axios';

interface NotesSectionProps {
  lessonTitle: string;
}

const NotesSection = ({ lessonTitle }: NotesSectionProps) => {
  const [notes, setNotes] = useState('');
  const [aiSummary, setAiSummary] = useState('');
  const [isGenerating, setIsGenerating] = useState(false);
  const [error, setError] = useState('');

const generateSummary = async () => {
  if (!notes.trim()) { /* ... */ }
  setIsGenerating(true);
  try {
    const model = 'models/gemini-2.5-flash'; // pick valid model
    const resp = await axios.post(
      `https://generativelanguage.googleapis.com/v1beta/${model}:generateContent?key=${'AIzaSyBSYhPR2dNZBL33h0wIUm3I1d3Ln7XamjQ'}`,
      {
        contents: [
          { role: 'user', parts: [{ text: notes }] }
        ]
      }
    );
    const text = resp.data.candidates?.[0]?.content?.parts?.map(p => p.text).join('') || '';
    setAiSummary(text);
    toast({ title: 'Summary Generated!', description: 'âœ¨' });
  } catch (err) {
    console.error('Gemini API failed:', err);
    setError('AI service unavailable. Please try again later.');
    toast({ title: 'Generation Failed', variant: 'destructive' });
  } finally {
    setIsGenerating(false);
  }
};



  const generateMockSummary = (notesText: string): string => {
    const wordCount = notesText.trim().split(/\s+/).length;
    const topics = extractKeyTopics(notesText);
    
    return `ðŸ“š **Learning Summary for "${lessonTitle}"**

**Key Concepts Covered:**
${topics.map(topic => `â€¢ ${topic}`).join('\n')}

**Main Takeaways:**
â€¢ This lesson covered ${wordCount} key points based on your notes
â€¢ Important concepts include the fundamental principles discussed
â€¢ Practical applications were highlighted throughout the content
â€¢ Consider reviewing the implementation details for better understanding

**Recommended Next Steps:**
â€¢ Practice the concepts covered in this lesson
â€¢ Review any unclear topics
â€¢ Apply the knowledge in real-world scenarios
â€¢ Prepare for the next lesson in the series

**Study Tip:** ${getStudyTip(notesText)}

---
*Generated by SkillMentor.AI - Powered by Gemini AI*`;
  };

  const extractKeyTopics = (text: string): string[] => {
    const commonTopics = [
      'React Components', 'TypeScript Integration', 'State Management',
      'Best Practices', 'Performance Optimization', 'Error Handling',
      'Component Lifecycle', 'Custom Hooks', 'Testing Strategies'
    ];
    
    const words = text.toLowerCase().split(/\s+/);
    const foundTopics = commonTopics.filter(topic => 
      words.some(word => topic.toLowerCase().includes(word) || word.includes(topic.toLowerCase().split(' ')[0]))
    );
    
    return foundTopics.length > 0 ? foundTopics.slice(0, 4) : ['Core Concepts', 'Implementation Details', 'Practical Applications'];
  };

  const getStudyTip = (text: string): string => {
    const tips = [
      'Create code examples to reinforce these concepts',
      'Discuss these topics with fellow students for deeper understanding',
      'Build a small project applying these principles',
      'Review the official documentation for additional context',
      'Take regular breaks to help retain the information better'
    ];
    return tips[Math.floor(Math.random() * tips.length)];
  };

  const downloadPDF = () => {
    if (!aiSummary) {
      toast({
        title: "No Summary Available",
        description: "Please generate a summary first before downloading.",
        variant: "destructive",
      });
      return;
    }

    try {
      generatePDF(lessonTitle, notes, aiSummary);
      toast({
        title: "PDF Downloaded! ðŸ“„",
        description: "Your notes and summary have been saved as PDF.",
      });
    } catch (err) {
      console.error('Error generating PDF:', err);
      toast({
        title: "Download Failed",
        description: "Unable to generate PDF. Please try again.",
        variant: "destructive",
      });
    }
  };

  const printSummary = () => {
    if (!aiSummary) {
      toast({
        title: "No Summary Available",
        description: "Please generate a summary first before printing.",
        variant: "destructive",
      });
      return;
    }

    const printWindow = window.open('', '_blank');
    if (printWindow) {
      printWindow.document.write(`
        <html>
          <head>
            <title>Study Notes - ${lessonTitle}</title>
            <style>
              body { font-family: Arial, sans-serif; padding: 20px; line-height: 1.6; }
              h1 { color: #2563eb; border-bottom: 2px solid #2563eb; padding-bottom: 10px; }
              h2 { color: #1e40af; margin-top: 30px; }
              .notes-section { background: #f8fafc; padding: 15px; border-radius: 8px; margin: 20px 0; }
              .summary-section { background: #eff6ff; padding: 15px; border-radius: 8px; margin: 20px 0; }
              pre { white-space: pre-wrap; font-family: inherit; }
            </style>
          </head>
          <body>
            <h1>Study Notes: ${lessonTitle}</h1>
            <h2>My Notes</h2>
            <div class="notes-section">
              <pre>${notes}</pre>
            </div>
            <h2>AI-Generated Summary</h2>
            <div class="summary-section">
              <pre>${aiSummary}</pre>
            </div>
            <script>window.print();</script>
          </body>
        </html>
      `);
      printWindow.document.close();
    }
  };

  return (
    <div className="space-y-6">
      {/* Notes Section */}
      <Card className="shadow-lg border-0 bg-white/80 backdrop-blur-sm">
        <CardHeader className="pb-4">
          <div className="flex items-center justify-between">
            <CardTitle className="flex items-center gap-2 text-xl">
              <BookOpen className="w-6 h-6 text-blue-600" />
              My Learning Notes
            </CardTitle>
            <Badge variant="outline" className="text-xs">
              {notes.length} characters
            </Badge>
          </div>
        </CardHeader>
        <CardContent>
          <Textarea
            placeholder="Take notes while you learn... Write down key concepts, important points, questions, or anything you want to remember from this lesson."
            value={notes}
            onChange={(e) => setNotes(e.target.value)}
            className="min-h-[200px] resize-none border-gray-200 focus:border-blue-500 focus:ring-blue-500"
          />
          
          <div className="mt-4 flex flex-col sm:flex-row gap-3">
            <Button 
              onClick={generateSummary}
              disabled={isGenerating}
              className="flex items-center gap-2 bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700"
            >
              {isGenerating ? (
                <Loader2 className="w-4 h-4 animate-spin" />
              ) : (
                <Sparkles className="w-4 h-4" />
              )}
              {isGenerating ? 'Generating Summary...' : 'Generate AI Summary'}
            </Button>

            {aiSummary && (
              <>
                <Button
                  variant="outline"
                  onClick={downloadPDF}
                  className="flex items-center gap-2"
                >
                  <Download className="w-4 h-4" />
                  Download PDF
                </Button>
                <Button
                  variant="outline"
                  onClick={printSummary}
                  className="flex items-center gap-2"
                >
                  <Printer className="w-4 h-4" />
                  Print
                </Button>
              </>
            )}
          </div>
        </CardContent>
      </Card>

      {/* Error Display */}
      {error && (
        <Card className="border-red-200 bg-red-50">
          <CardContent className="pt-4">
            <div className="flex items-center gap-2 text-red-700">
              <AlertCircle className="w-5 h-5" />
              <span className="font-medium">{error}</span>
            </div>
          </CardContent>
        </Card>
      )}

      {/* AI Summary Section */}
      {aiSummary && (
        <Card className="shadow-lg border-0 bg-gradient-to-br from-blue-50 to-indigo-50 border-blue-200">
          <CardHeader className="pb-4">
            <CardTitle className="flex items-center gap-2 text-xl">
              <Sparkles className="w-6 h-6 text-indigo-600" />
              AI-Generated Summary
              <Badge className="ml-2 bg-gradient-to-r from-blue-600 to-indigo-600">
                âœ¨ Powered by Gemini AI
              </Badge>
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="bg-white/80 rounded-lg p-6">
              <pre className="whitespace-pre-wrap font-sans text-gray-800 leading-relaxed">
                {aiSummary}
              </pre>
            </div>
            
            <Separator className="my-4" />
            
            <div className="flex flex-wrap gap-2 text-sm text-gray-600">
              <span>ðŸ’¡ This summary was generated based on your notes</span>
              <span>â€¢</span>
              <span>ðŸ“š Review and enhance as needed</span>
              <span>â€¢</span>
              <span>ðŸ”„ Regenerate anytime with updated notes</span>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
};

export default NotesSection;